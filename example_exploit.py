#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# File name          : example_exploit.py
# Author             : Vozec
# Date created       : 29 May 2023

import argparse
from RSA_Padding_Attack import *
from Crypto.Util.number import long_to_bytes
import pwn
pwn.context.log_level = 'critical'


def convert_to_int(opt):
    if opt.isdigit():
        return int(opt)
    elif opt[:2] == "0x" and opt[2:].isdigit():
        return int(opt[2:], 16)
    else:
        return opt

class Oracle:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.p = pwn.remote(self.host, self.port)

    def check_padding(self, ct: int) -> bool:
        self.p.send(long_to_bytes(ct))
        return b'padding is ok' in self.p.recvline()


def parseArgs():
    parser = argparse.ArgumentParser(description="")

    parser.add_argument("-v", "--verbose", default=False, action="store_true", help='Verbose mode. (default: False)')
    parser.add_argument("--debug", dest="debug", action="store_true", default=False, help="Debug mode.")

    parser.add_argument("-H", "--host", dest="host", required=True, default=None, type=str, help="Host to connect to.")
    parser.add_argument("-P", "--port", dest="port", required=True, default=None, type=int, help="Port to connect to.")

    parser.add_argument("-e", "--exponent", dest="exponent", required=True, default=None, type=str, help="")
    parser.add_argument("-c", "--ciphertext", dest="ciphertext", required=True, default=None, type=str, help="")
    parser.add_argument("-n", "--modulus", dest="modulus", required=True, default=None, type=str, help="")

    return parser.parse_args()


if __name__ == '__main__':
    options = parseArgs()

    # Convert to integers
    options.exponent = convert_to_int(options.exponent)
    options.ciphertext = convert_to_int(options.ciphertext)
    options.modulus = convert_to_int(options.modulus)

    # Create the connection to the remote oracle
    oracle = Oracle(host=options.host, port=options.port)

    # Prepare the exploit
    exploit = Bleichenbacher_Padding_Attack(
        e=options.exponent,
        c=options.ciphertext,
        n=options.modulus,
        oracle=oracle,
        verbose=options.verbose
    )

    # Exploit
    m = exploit.attack()

    # Final result
    print("Final result:", long_to_bytes(m))
